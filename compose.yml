services:
  nginx:
    image: nginx:latest
    restart: always
    depends_on:
      - golang-server
      - nestjs-server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/logs:/var/log/nginx
      - ./nginx/crts:/etc/nginx/crts
    networks:
      - single-deploy
  mysql:
    image: mysql:8.2
    restart: always
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/logs:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - 3306:3306
    networks:
      - single-deploy
  redis:
    image: redis
    restart: always
    ports:
      - 6379:6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/data
      - ./redis/logs:/var/log/redis
    networks:
      - single-deploy
  golang-server:
    build:
      context: ./services/golang
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
    ports:
      - "8888:8888"
    networks:
      - single-deploy
  nestjs-server:
    build:
      context: ./services/nestjs
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
    ports:
      - "3000:3000"
    environment:
      - MYSQL_HOST=mysql
      - REDIS_HOST=redis
    networks:
      - single-deploy
  nextjs-server:
    build:
      context: ./services/nextjs
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3001:3001"
    networks:
      - single-deploy
  react-express:
    build:
      context: ./services/react-express
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3002:3002"
    networks:
      - single-deploy
networks:
  single-deploy:
    driver: bridge
  app-tier:
    driver: bridge
